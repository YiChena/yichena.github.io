(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{429:function(t,a,s){"use strict";s.r(a);var v=s(2),_=Object(v.a)({},(function(){var t=this,a=t._self._c;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法"}},[t._v("#")]),t._v(" 算法")]),t._v(" "),a("p",[t._v("算法是指解题方案的准确而完整的描述，是一系列解决问题的清晰指令，算法代表着用系统的方法解决问题的策略机制。也就是说，能够对—定规范的输入，在有限时间内获得所要求的输出。")]),t._v(" "),a("p",[t._v("一个优秀的算法最求以下两个目标：")]),t._v(" "),a("ol",[a("li",[t._v("花最少的时间完成需求")]),t._v(" "),a("li",[t._v("占用最少的内存空间完成需求")])]),t._v(" "),a("h3",{attrs:{id:"算法的时间复杂度分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法的时间复杂度分析"}},[t._v("#")]),t._v(" 算法的时间复杂度分析")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("事后分析估算方法")])]),t._v(" "),a("li",[a("p",[t._v("事前分析估算方法")]),t._v(" "),a("ol",[a("li",[t._v("算法采用的策略和方案")]),t._v(" "),a("li",[t._v("编译产生的代码质量")]),t._v(" "),a("li",[t._v("问题的输入规模(所谓的问题输入规模就是输入量的多少)")]),t._v(" "),a("li",[t._v("机器执行指令的速度")])])])]),t._v(" "),a("h3",{attrs:{id:"算法的空间复杂度分析"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#算法的空间复杂度分析"}},[t._v("#")]),t._v(" 算法的空间复杂度分析")]),t._v(" "),a("h3",{attrs:{id:"函数渐进增长"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#函数渐进增长"}},[t._v("#")]),t._v(" 函数渐进增长")])])}),[],!1,null,null,null);a.default=_.exports}}]);